version: '3.8'

services:
  dev:
    container_name: media_task_dev
    build:
      context: ..  # Собираем из корня проекта
      dockerfile: docker/Dockerfile  # Путь к Dockerfile относительно контекста
    command: python planner/manage.py runserver 0.0.0.0:8000
    volumes:
      - ..:/app
    working_dir: /app
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    restart: unless-stopped
    networks:
      - planner-network

  prod:
    container_name: media_task_prod
    build:
      context: ..  # Собираем из корня проекта
      dockerfile: docker/Dockerfile  # Путь к Dockerfile относительно контекста
    command: >
      sh -c "
      cd /app/planner &&
      gunicorn planner.wsgi:application 
      --bind 0.0.0.0:8000 
      --workers 10 
      --timeout 120 
      --access-logfile - 
      --error-logfile -
      "
    environment:
      - DJANGO_SETTINGS_MODULE=planner.settings
      - PYTHONPATH=/app
      - BIND=0.0.0.0:8000
    volumes:
      - ..:/app
    working_dir: /app
    expose:
      - "8000"
    env_file:
      - ../.env
    restart: unless-stopped
    networks:
      - planner-network

  nginx:
    container_name: media_task_nginx
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../ssl:/etc/nginx/ssl:ro
      - ../planner/static:/app/planner/static:ro
      - ../planner/media:/app/planner/media:ro
    ports:
      - "8000:8000"
    depends_on:
      - prod
    networks:
      - planner-network

networks:
  planner-network:
    name: planner-network
    external: true
    driver: bridge