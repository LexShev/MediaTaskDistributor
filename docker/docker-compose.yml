version: '3.8'

services:
  dev:
    container_name: media_task_dev
    build:
      context: ..  # Собираем из корня проекта
      dockerfile: docker/Dockerfile  # Путь к Dockerfile относительно контекста
    command: python planner/manage.py runserver 0.0.0.0:8000
    volumes:
      - ..:/app
    working_dir: /app
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    restart: unless-stopped
    networks:
      - planner-network

  prod:
    container_name: media_task_prod
    build:
      context: ..  # Собираем из корня проекта
      dockerfile: docker/Dockerfile  # Путь к Dockerfile относительно контекста
    command: gunicorn --bind 0.0.0.0:8000 planner.wsgi:application --workers 12
    volumes:
      - ..:/app
    working_dir: /app
    expose:
      - "8000"
    env_file:
      - ../.env
    restart: unless-stopped
    networks:
      - planner-network

  nginx:
    container_name: media_task_nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../ssl:/etc/nginx/ssl
      - ../static:/app/static:ro  # Статика Django
      - ../media:/app/media:ro    # Медиа файлы
    depends_on:
      - prod
    networks:
      - planner-network

networks:
  planner-network:
    name: planner-network
    external: true
    driver: bridge